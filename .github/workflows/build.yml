name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget build-essential bc bison flex \
            libssl-dev libelf-dev ccache unzip zip python3 curl

      - name: Install clang-16 + Fix script permissions
        run: |
          sudo apt install -y llvm-16 clang-16 lld-16

          # √©p kernel d√πng clang-16
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-16 100
          sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-16 100
          sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-16 100
          sudo update-alternatives --install /usr/bin/llvm-objcopy llvm-objcopy /usr/bin/llvm-objcopy-16 100
          sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-16 100
          sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-16 100

      - name: Download Kernel Source (Release)
        run: |
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1
          chmod +x -R kernel-5.15/scripts || true

      - name: Clone utilities (AnyKernel3 & SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS patch
        run: |
          cd kernel-5.15
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig encoding
        run: |
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 sed -i "s/‚Äô/'/g; s/‚Äò/'/g"
          sed -i 's/^[[:space:]]*#/#/' drivers/power/supply/Kconfig || true

      - name: Select defconfig + Fetch ABI + Disable ABI check + Build Kernel
        shell: bash
        run: |
          set -euo pipefail
          cd kernel-5.15

          # üîπ Ch·ªçn defconfig cho A06
          if [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f arch/arm64/configs/a06_defconfig ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y defconfig cho A06!"
            exit 1
          fi
          echo "DEFCONFIG=$DEFCONFIG" >> "$GITHUB_ENV"
          echo "üëâ S·ª≠ d·ª•ng defconfig: $DEFCONFIG"

          # üîπ Clone ABI whitelist Android 13 - 5.15
          cd ..
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          cd kernel-5.15

          ABI_FILE=$(ls ../gki-common/android/ | grep "abi_gki_aarch64" | head -n1 || true)
          if [ -n "$ABI_FILE" ]; then
            echo "‚úÖ D√πng ABI whitelist: $ABI_FILE"
            cp ../gki-common/android/$ABI_FILE abi_symbollist.raw
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ABI ‚Üí t·∫°o file r·ªóng"
            : > abi_symbollist.raw
          fi

          # üîπ Copy ABI t·ªõi nhi·ªÅu path ƒë·ªÉ tr√°nh l·ªói
          mkdir -p abi \
                  out/abi \
                  out/android/abi \
                  out/obj/KERNEL_OBJ/kernel-5.15 \
                  out/target/product/a06x/obj/KERNEL_OBJ/kernel-5.15

          cp abi_symbollist.raw abi/abi_symbollist.raw
          cp abi_symbollist.raw out/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/android/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw
          cp abi_symbollist.raw out/target/product/a06x/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw

          echo "üìå ABI whitelist ƒë√£ x·ª≠ l√Ω:"
          find out -name "abi_symbollist.raw" -ls || true

          # üîπ Build .config (non-interactive)
          make O=out ARCH=arm64 "$DEFCONFIG"
          yes "" | make O=out ARCH=arm64 olddefconfig || true
          make O=out ARCH=arm64 olddefconfig </dev/null || true

          echo "‚úÖ File .config ƒë√£ sinh ra:"
          head -n 20 out/.config || true

          # üîπ √âp b·∫≠t option kernel image (n·∫øu c·∫ßn)
          if [ -f scripts/config ]; then
            scripts/config --file out/.config -e BUILD_ARM64_KERNEL -e KERNEL_GZIP || true
            make O=out ARCH=arm64 olddefconfig </dev/null || true
          fi

          # üîπ Build kernel + log
          chmod +x -R ./scripts || true
          ( make -j"$(nproc --all)" O=out ARCH=arm64 \
              CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld \
              Image dtbs modules 2>&1 | tee build.log ) || exit ${PIPESTATUS[0]}

          # üîπ Ki·ªÉm tra output
          if [ -f out/arch/arm64/boot/Image ]; then
            echo "‚úÖ Build th√†nh c√¥ng: t√¨m th·∫•y out/arch/arm64/boot/Image"
          elif [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "‚úÖ Build th√†nh c√¥ng: t√¨m th·∫•y out/arch/arm64/boot/Image.gz-dtb"
          else
            echo "‚ùå Build xong nh∆∞ng kh√¥ng c√≥ Image!"
            exit 1
          fi

      - name: Pack AnyKernel3 zip
        run: |
          IMG=$(ls kernel-5.15/out/arch/arm64/boot/Image* 2>/dev/null || true)
          if [ -z "$IMG" ]; then
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Image ‚Üí th·ª≠ l·∫•y kernel tar.gz"
            IMG=$(ls kernel-5.15/out/arch/arm64/boot/*.tar.gz 2>/dev/null || true)
            if [ -n "$IMG" ]; then
              cp "$IMG" AnyKernel3/Image.tar.gz
            else
              echo "‚ùå Kernel kh√¥ng t·∫°o ra Image ho·∫∑c tar.gz!"
              exit 1
            fi
          else
            cp "$IMG" AnyKernel3/Image
          fi

          # Copy dtb, dtbo n·∫øu c√≥
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtb* ../../../../AnyKernel3/ || true)
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtbo* ../../../../AnyKernel3/ || true)

          # zip l·∫°i
          cd AnyKernel3
          zip -r ../Kernel-A06-KSU-SUSFS.zip ./*

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            kernel-5.15/out/.config
            kernel-5.15/out/arch/arm64/boot/Image*
            kernel-5.15/out/arch/arm64/boot/*.tar.gz
            Kernel-A06-KSU-SUSFS.zip
            kernel-5.15/build.log
