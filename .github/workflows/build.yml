name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget build-essential bc bison flex \
            libssl-dev libelf-dev ccache unzip python3 clang llvm lld \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Download Kernel Source (Release)
        run: |
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"
      
      - name: Extract Kernel Source
        run: |
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone utilities (AnyKernel3 & SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS patch
        run: |
          cd kernel-5.15
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig encoding
        run: |
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -exec sed -i 's/[^ -~]//g' {} +
          sed -i 's/^[[:space:]]*#/#/' drivers/power/supply/Kconfig || true

      - name: Select defconfig + Fetch ABI + Build Kernel
        run: |
          cd kernel-5.15

          # üîπ Ch·ªçn defconfig cho A06
          if [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f arch/arm64/configs/a06_defconfig ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y defconfig cho A06!"
            exit 1
          fi
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

          # üîπ Clone ABI whitelist Android 13 - 5.15
          cd ..
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          cd kernel-5.15

          ABI_FILE=$(find ../gki-common/android/ -name "abi_gki_aarch64_mtk*" | head -n1 || true)
          if [ -n "$ABI_FILE" ]; then
            echo "‚úÖ D√πng ABI whitelist MTK: $ABI_FILE"
            cp "$ABI_FILE" abi_symbollist.raw
          else
            echo "‚ö†Ô∏è Kh√¥ng c√≥ ABI MTK ‚Üí th·ª≠ generic"
            ABI_FILE=$(find ../gki-common/android/ -name "abi_gki_aarch64_generic*" | head -n1 || true)
            if [ -n "$ABI_FILE" ]; then
              echo "‚úÖ D√πng ABI whitelist generic: $ABI_FILE"
              cp "$ABI_FILE" abi_symbollist.raw
            else
              echo "‚ùå Kh√¥ng t√¨m th·∫•y file ABI ph√π h·ª£p ‚Üí t·∫°o file r·ªóng"
              touch abi_symbollist.raw
            fi
          fi

          # üîπ Copy ABI v√†o c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt
          mkdir -p out/abi out/android/abi
          cp abi_symbollist.raw out/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/android/abi/abi_symbollist.raw

          # üîπ Build kernel + log
          chmod +x -R ./scripts
          make O=out ARCH=arm64 $DEFCONFIG
          yes "" | make O=out ARCH=arm64 olddefconfig
          make -j$(nproc) O=out ARCH=arm64 \
            CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld 2>&1 | tee build.log

      - name: Pack & Upload Kernel
        if: success()
        run: |
          IMG_PATH=$(find kernel-5.15/out/arch/arm64/boot/ -maxdepth 1 -name "Image*" | head -n1 || true)

          if [ -z "$IMG_PATH" ]; then
            echo "‚ùå Kernel build failed! No Image or Image.gz-dtb found."
            exit 1
          fi

          cp "$IMG_PATH" AnyKernel3/Image

          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtb* ../../../../AnyKernel3/ || true)
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtbo* ../../../../AnyKernel3/ || true)

          cd AnyKernel3
          zip -r ../Kernel-A06-KSU-SUSFS.zip ./*

      - name: Upload artifacts (config + zip + image + log)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            kernel-5.15/out/.config
            kernel-5.15/out/arch/arm64/boot/Image*
            Kernel-A06-KSU-SUSFS.zip
            kernel-5.15/build.log
