name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget curl unzip zip bc bison flex build-essential \
            device-tree-compiler libncurses-dev lz4 xz-utils zstd libssl-dev libelf-dev \
            python3 python3-pip openjdk-17-jdk ccache pahole erofs-utils \
            llvm clang lld bazelisk --fix-missing

      - name: Download Kernel Source (Release)
        run: |
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"

      - name: Extract Kernel Source
        run: |
          mkdir -p kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone utilities (AnyKernel3, SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next + SUSFS
        run: |
          cd kernel-5.15
          echo "⚡ Apply KernelSU Next"
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash - || true
          echo "⚡ Apply SUSFS patch"
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fetch ABI whitelist
        run: |
          cd kernel-5.15
          cd ..
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          cd kernel-5.15

          ABI_FILE=$(ls ../gki-common/android/ | grep "abi_gki_aarch64_mtk" | head -n1 || true)
          if [ -n "$ABI_FILE" ]; then
            cp ../gki-common/android/$ABI_FILE abi_symbollist.raw
          else
            ABI_FILE=$(ls ../gki-common/android/ | grep "abi_gki_aarch64_generic" | head -n1 || true)
            if [ -n "$ABI_FILE" ]; then
              cp ../gki-common/android/$ABI_FILE abi_symbollist.raw
            else
              : > abi_symbollist.raw
            fi
          fi

          mkdir -p abi out/abi out/android/abi out/obj/KERNEL_OBJ/kernel-5.15
          cp abi_symbollist.raw abi/abi_symbollist.raw
          cp abi_symbollist.raw out/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/android/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw

          echo "✅ ABI whitelist đã được copy đầy đủ"

      - name: Build Kernel
        shell: bash
        run: |
          set -euo pipefail
          cd kernel-5.15

          if [ -f "tools/bazel" ]; then
            echo "[INFO] Using Bazel build..."
            chmod +x tools/bazel
            tools/bazel build --config=fast //common:kernel_aarch64_dist 2>&1 | tee ../build.log
          else
            echo "[INFO] Using make + Neutron-Clang..."

            if [ ! -d "$HOME/toolchains/neutron-clang" ]; then
              mkdir -p "$HOME/toolchains/neutron-clang"
              cd "$HOME/toolchains/neutron-clang"
              curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
              chmod +x antman
              bash antman -S && bash antman --patch=glibc
              cd "$GITHUB_WORKSPACE/kernel-5.15"
              export PATH="$HOME/toolchains/neutron-clang/bin:$PATH"
            fi

            DEFCONFIG=$(ls arch/arm64/configs/*a06*_defconfig | head -n1 | xargs -n1 basename || true)
            if [ -z "$DEFCONFIG" ]; then
              echo "❌ Không tìm thấy defconfig cho A06!"
              exit 1
            fi

            make O=out ARCH=arm64 $DEFCONFIG
            yes "" | make O=out ARCH=arm64 olddefconfig </dev/null

            ( make -j$(nproc) O=out ARCH=arm64 \
                CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld Image dtbs modules \
                2>&1 | tee ../build.log ) || exit ${PIPESTATUS[0]}
          fi

      - name: Pack AnyKernel3 zip
        run: |
          IMG=$(ls kernel-5.15/out/arch/arm64/boot/Image* 2>/dev/null || true)
          if [ -n "$IMG" ]; then
            cp "$IMG" AnyKernel3/Image
          else
            echo "⚠️ Không có Image, thử Image.gz-dtb"
            IMG=$(ls kernel-5.15/out/arch/arm64/boot/Image.gz-dtb* 2>/dev/null || true)
            [ -n "$IMG" ] && cp "$IMG" AnyKernel3/Image.gz-dtb
          fi
          cd AnyKernel3
          zip -r ../Kernel-A06-KSU-SUSFS.zip ./*

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            kernel-5.15/out/.config
            kernel-5.15/out/arch/arm64/boot/Image*
            kernel-5.15/out/arch/arm64/boot/Image.gz-dtb*
            Kernel-A06-KSU-SUSFS.zip
            build.log
