name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      # 1. Checkout
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget curl build-essential bc bison flex \
            libssl-dev libelf-dev ccache unzip python3 clang llvm lld dos2unix \
            gcc-aarch64-linux-gnu

      # 3. Download Kernel Source
      - name: Download Kernel Source (Release auto-detect)
        run: |
          echo "‚¨áÔ∏è T·∫£i kernel source t·ª´ release V1"
          ASSET_URL=$(curl -s https://api.github.com/repos/huyzilo77-bot/Bufffkernela065g/releases/tags/V1 \
            | grep "browser_download_url" \
            | grep "kernel-5.15.tar" \
            | cut -d '"' -f 4)

          if [ -z "$ASSET_URL" ]; then
            echo "‚ùå Kh√¥ng t√¨m th·∫•y asset kernel-5.15.tar"
            exit 1
          fi

          wget -nv -O kernel.tar "$ASSET_URL"
          mkdir -p kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1
          echo "‚úÖ Gi·∫£i n√©n th√†nh c√¥ng"
          ls -la kernel-5.15 | head -20

      # 4. Li·ªát k√™ t·∫•t c·∫£ defconfig
      - name: List defconfigs
        run: |
          cd kernel-5.15
          echo "üìÇ T·∫•t c·∫£ file defconfig trong arch/arm64/configs:"
          ls arch/arm64/configs | grep defconfig

      # 5. Fetch ABI whitelist
      - name: Fetch ABI whitelist from AOSP GKI
        run: |
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          ABI_FILE=$(ls gki-common/android/abi_gki_aarch64* 2>/dev/null | head -n1 || true)
          if [ -n "$ABI_FILE" ]; then
            cp "$ABI_FILE" kernel-5.15/abi_symbollist.raw
            echo "‚úÖ Copied ABI: $ABI_FILE"
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ABI, t·∫°o file r·ªóng"
            touch kernel-5.15/abi_symbollist.raw
          fi

      # 6. Clone utilities
      - name: Clone utilities (AnyKernel3 & SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      # 7. Apply KernelSU-Next
      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

      # 8. Apply SUSFS
      - name: Apply SUSFS patch
        run: |
          cd kernel-5.15
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      # 9. Fix Kconfig
      - name: Fix Kconfig encoding
        run: |
          cd kernel-5.15
          find . -name "Kconfig*" -exec dos2unix {} \;
          find . -name "Kconfig*" -exec sed -i "s/‚Äô/'/g" {} \;

      # 10. Select defconfig (s·∫Ω ch·ªânh l·∫°i sau khi bi·∫øt t√™n ch√≠nh x√°c)
      - name: Select defconfig
        run: |
          cd kernel-5.15
          if [ -f "arch/arm64/configs/a06x_defconfig" ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f "arch/arm64/configs/a06_defconfig" ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y defconfig cho A06!"
            exit 1
          fi
          echo "‚úÖ D√πng defconfig: $DEFCONFIG"
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

      # 11. Build kernel
      - name: Build Kernel
        run: |
          cd kernel-5.15
          make O=out ARCH=arm64 $DEFCONFIG
          make -j$(nproc) O=out ARCH=arm64 \
            CC=clang LD=ld.lld CROSS_COMPILE=aarch64-linux-gnu-

      # 12. Pack AnyKernel3
      - name: Pack AnyKernel3 zip
        run: |
          OUTDIR=kernel-5.15/out/arch/arm64/boot
          cp $OUTDIR/Image* AnyKernel3/ || true
          cp $OUTDIR/dtb* AnyKernel3/ || true
          cp $OUTDIR/dtbo* AnyKernel3/ || true
          cd AnyKernel3
          zip -r9 ../Kernel-A06-KSU-SUSFS.zip ./*

      # 13. Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-A06-KSU-SUSFS
          path: |
            Kernel-A06-KSU-SUSFS.zip
            kernel-5.15/out/arch/arm64/boot/Image*
