name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget curl build-essential bc bison flex \
            libssl-dev libelf-dev ccache unzip zip python3 python3-pip \
            lz4 xz-utils zlib1g-dev device-tree-compiler \
            libncurses-dev libxml2-utils xsltproc kmod cpio \
            openjdk-17-jdk

      - name: Setup Neutron-Clang Toolchain
        run: |
          mkdir -p $HOME/toolchains
          if [ ! -d "$HOME/toolchains/neutron-clang" ]; then
            echo "⬇️ Cloning Neutron-Clang Toolchain"
            mkdir -p $HOME/toolchains/neutron-clang && cd $HOME/toolchains/neutron-clang
            curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
            chmod +x antman
            ./antman -S
            ./antman --patch=glibc
          fi
          echo "$HOME/toolchains/neutron-clang/bin" >> $GITHUB_PATH

      - name: Download Kernel Source
        run: |
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone utilities (AnyKernel3 & SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS patch
        run: |
          cd kernel-5.15
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Select defconfig + Build Kernel
        shell: bash
        run: |
          cd kernel-5.15

          # chọn defconfig
          if [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f arch/arm64/configs/a06_defconfig ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "❌ Không tìm thấy defconfig!"
            exit 1
          fi
          echo "DEFCONFIG=$DEFCONFIG"

          # tạo config
          make O=out ARCH=arm64 $DEFCONFIG
          yes "" | make O=out ARCH=arm64 olddefconfig

          # build kernel với Neutron-Clang
          ( make -j$(nproc --all) O=out ARCH=arm64 \
              CC=clang \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              LLVM=1 LLVM_IAS=1 \
              LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip \
              Image dtbs modules 2>&1 | tee build.log ) || exit ${PIPESTATUS[0]}

      - name: Pack AnyKernel3 zip
        run: |
          IMG=$(ls kernel-5.15/out/arch/arm64/boot/Image* 2>/dev/null | head -n1 || true)
          if [ -z "$IMG" ]; then
            echo "❌ Không tìm thấy kernel Image!"
            exit 1
          fi
          cp "$IMG" AnyKernel3/Image
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtb* ../../../../AnyKernel3/ || true)
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtbo* ../../../../AnyKernel3/ || true)
          cd AnyKernel3
          zip -r ../Kernel-A06-KSU-SUSFS.zip ./*

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            kernel-5.15/out/.config
            kernel-5.15/out/arch/arm64/boot/Image*
            Kernel-A06-KSU-SUSFS.zip
            kernel-5.15/build.log
