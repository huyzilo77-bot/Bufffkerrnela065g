name: Build Samsung A06 5G (GKI 5.15.151 ‚Ä¢ KSU-Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Maximize build space (optional)
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          verbose: 'true'

      - name: Install toolchain & deps (clang-16, lld-16)
        run: |
          set -eux
          sudo apt update
          sudo apt install -y \
            git curl wget unzip zip xz-utils zstd \
            build-essential bc bison flex \
            libelf-dev libssl-dev libarchive-tools \
            device-tree-compiler lz4 \
            llvm-16 clang-16 lld-16 \
            python3 python-is-python3 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            pahole
          # √©p clang-16 & lld-16
          sudo update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-16 100
          sudo update-alternatives --install /usr/bin/ld.lld  ld.lld  /usr/bin/lld-16   100

      - name: Download kernel source (A06 ‚Ä¢ 5.15)
        run: |
          set -eux
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone AnyKernel3 & SUSFS
        run: |
          set -eux
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          # SUSFS cho GKI Android 13 ‚Ä¢ 5.15
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          set -eux
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s -- -s next

      - name: Apply SUSFS patches
        run: |
          set -eux
          cd kernel-5.15
          patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig unicode/whitespace
        run: |
          set -eux
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 sed -i "s/‚Äô/'/g; s/‚Äò/'/g"
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 perl -i -pe 's/\x{00A0}/ /g; s/\x{FEFF}//g; s/\r$//'
          sed -i 's/^[[:space:]]*#/#/' drivers/power/supply/Kconfig || true

      - name: Select defconfig + Fetch ABI (MTK) + Build
        shell: bash
        run: |
          set -euo pipefail
          cd kernel-5.15

          echo "üîπ Detect A06 defconfig‚Ä¶"
          if [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f arch/arm64/configs/a06_defconfig ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y a06(x)_defconfig!"
            exit 1
          fi
          echo "‚úÖ DEFCONFIG=$DEFCONFIG"

          echo "üîπ Fetch ABI whitelist (android13-5.15, ∆∞u ti√™n Mediatek)‚Ä¶"
          cd ..
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          cd kernel-5.15
          ABI_FILE=""
          if ls ../gki-common/android/ | grep -q "^abi_gki_aarch64_mtk"; then
            ABI_FILE=$(ls ../gki-common/android/ | grep "^abi_gki_aarch64_mtk" | head -n1)
          elif ls ../gki-common/android/ | grep -q "^abi_gki_aarch64_generic"; then
            ABI_FILE=$(ls ../gki-common/android/ | grep "^abi_gki_aarch64_generic" | head -n1)
          fi
          if [ -n "${ABI_FILE:-}" ]; then
            echo "‚úÖ Using ABI whitelist: $ABI_FILE"
            cp "../gki-common/android/$ABI_FILE" abi_symbollist.raw
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ABI ph√π h·ª£p ‚Üí t·∫°o file r·ªóng"
            : > abi_symbollist.raw
          fi

          echo "üîπ Copy ABI v√†o c√°c path th∆∞·ªùng ƒë∆∞·ª£c kernel g·ªçi‚Ä¶"
          mkdir -p abi out out/abi out/android/abi out/obj/KERNEL_OBJ/kernel-5.15
          cp abi_symbollist.raw abi/abi_symbollist.raw
          cp abi_symbollist.raw out/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/android/abi/abi_symbollist.raw
          cp abi_symbollist.raw out/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw
          # üëâ FIX: th√™m 2 path tuy·ªát ƒë·ªëi hay b·ªã hard-code b·ªüi vendor (log c·ªßa b·∫°n)
          for prod in a06x a06; do
            ABS="/home/dpi/qb5_8814/workspace/P4_1716/android/out/target/product/${prod}/obj/KERNEL_OBJ/kernel-5.15"
            sudo mkdir -p "$ABS"
            sudo install -m 0644 abi_symbollist.raw "$ABS/abi_symbollist.raw"
          done

          echo "üìé ABI files:"
          find . -name "abi_symbollist.raw" -ls || true

          echo "üîπ Generate .config (non-interactive)‚Ä¶"
          # üëâ FIX: tr√°nh Permission denied + d√πng clang ngay t·ª´ b∆∞·ªõc config
          chmod +x -R ./scripts || true
          MAKEVARS="O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld"
          make $MAKEVARS "$DEFCONFIG"
          # üëâ FIX: b·ªè h·∫≥n 'yes' ƒë·ªÉ h·∫øt Broken pipe
          make $MAKEVARS olddefconfig </dev/null

          echo "üîπ Enable KSU + SUSFS + LTO Thin + Net/BBR + LOCALVERSION‚Ä¶"
          ./scripts/config --file out/.config \
            -e KSU \
            -e KSU_SUSFS \
            -e KSU_SUSFS_HAS_MAGIC_MOUNT \
            -e KSU_SUSFS_SUS_PATH \
            -e KSU_SUSFS_SUS_MOUNT \
            -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
            -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
            -e KSU_SUSFS_SUS_KSTAT \
            -d KSU_SUSFS_SUS_OVERLAYFS \
            -e KSU_SUSFS_TRY_UMOUNT \
            -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
            -e KSU_SUSFS_SPOOF_UNAME \
            -e KSU_SUSFS_ENABLE_LOG \
            -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
            -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
            -e KSU_SUSFS_OPEN_REDIRECT || true
          ./scripts/config --file out/.config -d KSU_KPROBES_HOOK || true
          ./scripts/config --file out/.config \
            -e LTO_CLANG -e LTO_CLANG_THIN \
            -e CC_OPTIMIZE_FOR_PERFORMANCE \
            -d CC_OPTIMIZE_FOR_PERFORMANCE_O3 || true
          ./scripts/config --file out/.config \
            -e TCP_CONG_ADVANCED -e TCP_CONG_BBR -e NET_SCH_FQ || true
          ./scripts/config --file out/.config \
            --set-str LOCALVERSION "-A06GKI-5.15.151-KSUNext-SUSFS" || true

          echo "üîπ Merge l·∫°i config‚Ä¶"
          make $MAKEVARS olddefconfig </dev/null

          echo "‚úÖ .config (head):"
          head -n 50 out/.config || true

          echo "üöÄ Build kernel (ghi log & gi·ªØ exit code)‚Ä¶"
          ( make -j"$(nproc --all)" $MAKEVARS Image dtbs modules 2>&1 | tee build.log ); test ${PIPESTATUS[0]} -eq 0

          echo "üîé Ki·ªÉm tra output‚Ä¶"
          if [ -f out/arch/arm64/boot/Image ]; then
            echo "‚úÖ Found: out/arch/arm64/boot/Image"
          elif [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "‚úÖ Found: out/arch/arm64/boot/Image.gz-dtb"
          else
            echo "‚ùå Build xong nh∆∞ng kh√¥ng c√≥ Image!"
            exit 1
          fi

          echo "üìù L∆∞u tuned defconfig ƒë·ªÉ debug (tu·ª≥ ch·ªçn)‚Ä¶"
          make $MAKEVARS savedefconfig || true
          cp out/defconfig out/a06_tuned_defconfig || true

      - name: Pack AnyKernel3
        run: |
          set -eux
          IMG=$(ls kernel-5.15/out/arch/arm64/boot/Image* 2>/dev/null | head -n1 || true)
          if [ -z "$IMG" ]; then
            echo "‚ö†Ô∏è Kh√¥ng c√≥ Image* ‚Üí th·ª≠ tarballs"
            IMG=$(ls kernel-5.15/out/arch/arm64/boot/*.tar.gz 2>/dev/null | head -n1 || true)
            if [ -n "$IMG" ]; then
              cp "$IMG" AnyKernel3/Image.tar.gz
            else
              echo "‚ùå Kh√¥ng t√¨m th·∫•y Image ho·∫∑c tar.gz ƒë·ªÉ pack!"
              exit 1
            fi
          else
            cp "$IMG" AnyKernel3/Image
          fi
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtb* ../../../../AnyKernel3/ || true)
          (cd kernel-5.15/out/arch/arm64/boot && cp -r dtbo* ../../../../AnyKernel3/ || true)
          cd AnyKernel3
          zip -r ../Kernel-A06-5.15.151-KSU-Next-SUSFS.zip ./*

      - name: Upload artifacts (config ‚Ä¢ image ‚Ä¢ zip ‚Ä¢ log ‚Ä¢ objects)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs-A06-5.15.151
          path: |
            kernel-5.15/build.log
            kernel-5.15/out/.config
            kernel-5.15/out/a06_tuned_defconfig
            kernel-5.15/out/arch/arm64/boot/Image*
            kernel-5.15/out/arch/arm64/boot/*.tar.gz
            Kernel-A06-5.15.151-KSU-Next-SUSFS.zip
            kernel-5.15/out/**/*.o
            kernel-5.15/out/**/*.cmd
      - name: Upload artifacts (config ‚Ä¢ image ‚Ä¢ zip ‚Ä¢ log ‚Ä¢ objects)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs-A06-5.15.151
          path: |
            kernel-5.15/build.log
            kernel-5.15/out/.config
            kernel-5.15/out/a06_tuned_defconfig
            kernel-5.15/out/arch/arm64/boot/Image*
            kernel-5.15/out/arch/arm64/boot/*.tar.gz
            Kernel-A06-5.15.151-KSU-Next-SUSFS.zip
            kernel-5.15/out/**/*.o
            kernel-5.15/out/**/*.cmd

      - name: Collect .rej files
        if: always()
        run: |
          mkdir -p rej_artifacts
          find . -type f -name "*.rej" -print > rej_artifacts/rej-list.txt || true
          if [ -s rej_artifacts/rej-list.txt ]; then
            tar -czf rej_artifacts/rej-files.tar.gz -T rej_artifacts/rej-list.txt
          else
            echo "No .rej files found."
          fi

      - name: Upload REJ to Release
        if: hashFiles('rej_artifacts/rej-files.tar.gz') != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: rej-${{ github.run_id }}
          name: "REJ dump ${{ github.run_id }}"
          files: rej_artifacts/rej-files.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
