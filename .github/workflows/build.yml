name: Build Samsung A06 Kernel (KSU Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget build-essential bc bison flex \
            libssl-dev libelf-dev ccache unzip zip python3 clang llvm lld \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu curl

      - name: Download Kernel Source (Release)
        run: |
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"

      - name: Extract Kernel Source
        run: |
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone utilities (AnyKernel3 & SUSFS)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS patch
        run: |
          cd kernel-5.15
          patch -p1 < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig encoding (sanitize quotes/whitespace)
        run: |
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 sed -i "s/’/'/g; s/‘/'/g"
          sed -i 's/^[[:space:]]*#/#/' drivers/power/supply/Kconfig || true

      - name: Select defconfig + Fetch ABI + Build Kernel
        run: |
          set -e
          cd kernel-5.15

          # 🔹 Chọn defconfig cho A06
          if [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          elif [ -f arch/arm64/configs/a06_defconfig ]; then
            DEFCONFIG=a06_defconfig
          else
            echo "❌ Không tìm thấy defconfig cho A06!"
            exit 1
          fi
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

          # 🔹 Clone ABI whitelist Android 13 - 5.15
          cd ..
          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          cd kernel-5.15

          # 🔹 Chọn ABI MTK trước, fallback generic
          ABI_FILE="$(ls ../gki-common/android/ | grep -m1 'abi_gki_aarch64_mtk' || true)"
          if [ -n "$ABI_FILE" ]; then
            echo "✅ Dùng ABI whitelist MTK: $ABI_FILE"
            cp ../gki-common/android/"$ABI_FILE" abi_symbollist.raw
          else
            echo "⚠️ Không có ABI MTK → thử generic"
            ABI_FILE="$(ls ../gki-common/android/ | grep -m1 'abi_gki_aarch64_generic' || true)"
            if [ -n "$ABI_FILE" ]; then
              echo "✅ Dùng ABI whitelist generic: $ABI_FILE"
              cp ../gki-common/android/"$ABI_FILE" abi_symbollist.raw
            else
              echo "❌ Không tìm thấy file ABI phù hợp → tạo file rỗng"
              : > abi_symbollist.raw
            fi
          fi

          # 🔹 Copy ABI vào các path kernel hay check
          mkdir -p abi out out/abi out/android/abi out/obj/KERNEL_OBJ/kernel-5.15
          cp -f abi_symbollist.raw abi/abi_symbollist.raw
          cp -f abi_symbollist.raw out/abi/abi_symbollist.raw
          cp -f abi_symbollist.raw out/android/abi/abi_symbollist.raw
          cp -f abi_symbollist.raw out/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw
          cp -f abi_symbollist.raw .abi_symbollist.raw

          # 🔹 (QUAN TRỌNG) Tạo đường dẫn tuyệt đối mà vendor hard-code rồi copy vào
          sudo mkdir -p /home/dpi/qb5_8814/workspace/P4_1716/android/out/target/product/a06x/obj/KERNEL_OBJ/kernel-5.15
          sudo mkdir -p /home/dpi/qb5_8814/workspace/P4_1716/android/out/target/product/a06/obj/KERNEL_OBJ/kernel-5.15
          sudo cp -f abi_symbollist.raw /home/dpi/qb5_8814/workspace/P4_1716/android/out/target/product/a06x/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw
          sudo cp -f abi_symbollist.raw /home/dpi/qb5_8814/workspace/P4_1716/android/out/target/product/a06/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw
          # (Tuỳ quyền, nếu cần có thể sudo chown để runner đọc/ghi)
          sudo chown -R $USER:$USER /home/dpi || true

          echo "📌 ABI whitelist đã copy:"
          (find . -name "abi_symbollist.raw" -ls || true)

          # 🔹 Fix Kconfig encoding (loại ký tự unicode lạ)
          find drivers -name "Kconfig*" -type f -exec sed -i 's/[^ -~]//g' {} +

          # 🔹 Build kernel + ghi log
          chmod +x -R ./scripts
          make O=out ARCH=arm64 "$DEFCONFIG"
          yes "" | make O=out ARCH=arm64 olddefconfig
          make -j"$(nproc --all)" O=out ARCH=arm64 \
            CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld 2>&1 | tee build.log

      - name: Upload artifacts (config + zip + image + log + abi/obj)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            kernel-5.15/build.log
            kernel-5.15/out/.config
            kernel-5.15/out/arch/arm64/boot/Image*
            Kernel-A06-KSU-SUSFS.zip
            kernel-5.15/out/abi/**
            kernel-5.15/out/android/abi/**
            kernel-5.15/out/obj/**
