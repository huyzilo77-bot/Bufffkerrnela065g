name: Build Samsung A06 5G Kernel 5.15 (KSU + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Free up disk space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          remove-large-packages: true
          remove-swapfile: true
          verbose: true

      - name: Install deps & toolchains
        run: |
          set -eux
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y \
            git curl wget unzip zip xz-utils zstd \
            build-essential bc bison flex \
            libelf-dev libssl-dev libarchive-tools \
            device-tree-compiler lz4 cpio rsync \
            llvm-16 clang-16 lld-16 \
            python3 python-is-python3 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi g++-arm-linux-gnueabi \
            pahole ccache
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-16 100

      - name: Setup ccache
        run: |
          export USE_CCACHE=1
          ccache -M 10G
          ccache -z

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Download Kernel Source (Samsung A06 Release)
        run: |
          set -eux
          wget -O source.zip "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/A066B-5G.zip"
          unzip -q source.zip

          echo "üìÇ Sau khi gi·∫£i n√©n source.zip:"
          ls -la

          tar -xvf Kernel.tar.gz

          echo "üìÇ Sau khi gi·∫£i n√©n Kernel.tar.gz:"
          ls -la

          if [ -d kernel-5.15 ]; then
            echo "‚úÖ ƒê√£ t√¨m th·∫•y kernel-5.15"
          else
            SRC_DIR=$(find . -maxdepth 1 -type d -name "SM-A066B*" | head -n 1 || true)
            if [ -z "$SRC_DIR" ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c source sau khi gi·∫£i n√©n!"
              exit 1
            fi
            mv "$SRC_DIR" kernel-5.15
          fi

          chmod +x -R kernel-5.15

          echo "üìÇ C·∫•u tr√∫c trong kernel-5.15:"
          ls -la kernel-5.15

      - name: Clone AnyKernel3 & SUSFS
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" \
            | bash -s -- -s next

      - name: Apply SUSFS patches
        run: |
          cd kernel-5.15
          patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig encoding
        run: |
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -print0 | \
            xargs -0 sed -i "s/‚Äô/'/g; s/‚Äò/'/g"
          find drivers -name "Kconfig*" -type f -print0 | \
            xargs -0 perl -i -pe 's/\x{00A0}/ /g; s/\x{FEFF}//g; s/\r$//'

      - name: Select defconfig & fetch ABI
        run: |
          set -eux
          cd kernel-5.15

          if [ -f arch/arm64/configs/a06x_00_defconfig ]; then
            DEFCONFIG=a06x_00_defconfig
          elif [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          else
            DEFCONFIG=gki_defconfig
          fi
          echo "‚úÖ DEFCONFIG=$DEFCONFIG"

          git clone --depth=1 https://android.googlesource.com/kernel/common -b android13-5.15 gki-common
          ABI=$(ls gki-common/android/ | grep -E "abi_gki_aarch64_" | head -n1 || true)

          mkdir -p out
          if [ -n "$ABI" ]; then
            cp "gki-common/android/$ABI" out/abi_symbollist.raw
          else
            echo "" > out/abi_symbollist.raw
          fi

          make O=out ARCH=arm64 $DEFCONFIG
          make O=out ARCH=arm64 olddefconfig
          ./scripts/config --file out/.config -e KSU -e KSU_SUSFS || true
          ./scripts/config --file out/.config -d KSU_KPROBES_HOOK || true
          make O=out ARCH=arm64 olddefconfig

      - name: Fake prebuilts NDK
        run: |
          echo "‚ö° Fake NDK ƒë·ªÉ Samsung build.sh kh√¥ng b√°o l·ªói"
          rm -rf prebuilts/ndk
          mkdir -p prebuilts/ndk/linux-x86
          ln -sf /usr/bin/clang-16 prebuilts/ndk/linux-x86/clang
          ln -sf /usr/bin/clang++-16 prebuilts/ndk/linux-x86/clang++
          ln -sf /usr/bin/ld.lld-16 prebuilts/ndk/linux-x86/ld.lld
          ln -sf /usr/bin/aarch64-linux-gnu-gcc prebuilts/ndk/linux-x86/aarch64-linux-gnu-gcc
          ln -sf /usr/bin/aarch64-linux-gnu-ld prebuilts/ndk/linux-x86/aarch64-linux-gnu-ld
          ls -la prebuilts/ndk/linux-x86

      - name: Build Kernel (Samsung build.sh)
        run: |
          set -eux
          cd kernel-5.15

          # T·∫°o build.config t·ª´ defconfig
          python3 scripts/gen_build_config.py \
            --kernel-defconfig a06x_00_defconfig \
            --kernel-defconfig-overlays "entry_level.config" \
            -m user \
            -o ../out/target/product/a06x/obj/KERNEL_OBJ/build.config

          # Xu·∫•t bi·∫øn m√¥i tr∆∞·ªùng cho build
          export ARCH=arm64
          export PLATFORM_VERSION=13
          export CROSS_COMPILE="aarch64-linux-gnu-"
          export CROSS_COMPILE_COMPAT="arm-linux-gnueabi-"
          export OUT_DIR="../out/target/product/a06x/obj/KERNEL_OBJ"
          export DIST_DIR="../out/target/product/a06x/obj/KERNEL_OBJ/dist"
          export BUILD_CONFIG="../out/target/product/a06x/obj/KERNEL_OBJ/build.config"

          # Ch·∫°y build.sh c·ªßa Samsung (n·∫±m trong kernel/build/)
          cd ../kernel
          ./build/build.sh -j$(nproc --all) 2>&1 | tee ../build.log

          echo "üìÇ DIST_DIR sau khi build:"
          ls -la $DIST_DIR || true

      - name: ƒê√≥ng g√≥i AnyKernel3 (KernelSU + SUSFS)
        run: |
          set -eux
          DIST_DIR=out/target/product/a06x/obj/KERNEL_OBJ/dist
          IMG=""

          # ∆Øu ti√™n Image.gz, sau ƒë√≥ th·ª≠ c√°c bi·∫øn th·ªÉ kh√°c
          if [ -f "$DIST_DIR/Image.gz" ]; then
            IMG=$DIST_DIR/Image.gz
          elif [ -f "$DIST_DIR/Image.lz4" ]; then
            IMG=$DIST_DIR/Image.lz4
          elif [ -f "$DIST_DIR/Image" ]; then
            IMG=$DIST_DIR/Image
          fi

          if [ -z "$IMG" ]; then
            echo "‚ùå Kh√¥ng t√¨m th·∫•y kernel Image trong $DIST_DIR"
            ls -la $DIST_DIR || true
            exit 1
          fi

          echo "‚úÖ ƒê√£ t√¨m th·∫•y kernel Image: $IMG"

          # Copy v√†o AnyKernel3
          cp "$IMG" AnyKernel3/Image
          cp -r $DIST_DIR/dtbo* AnyKernel3/ || true

          # ƒê√≥ng g√≥i th√†nh zip
          cd AnyKernel3
          zip -r9 "../Kernel-A06-5.15.151-KSU-SUSFS.zip" . -x .git README.md *.zip

      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-A06-5.15.151-KSU-SUSFS
          path: Kernel-A06-5.15.151-KSU-SUSFS.zip
