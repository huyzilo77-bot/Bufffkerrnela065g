name: Build Samsung A06 5G (GKI 5.15.151 • KSU-Next + SUSFS)
'on':
  workflow_dispatch: null
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Maximize build space
      uses: AdityaGarg8/remove-unwanted-software@v5
      with:
        remove-android: 'true'
        remove-dotnet: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        remove-large-packages: 'true'
        remove-swapfile: 'true'
        verbose: 'true'
    - name: Install toolchain & deps (clang-16, lld-16)
      run: "set -eux\nsudo apt update\nsudo apt install -y software-properties-common\n\
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\nsudo apt update\n\
        sudo apt install -y \\\n    git curl wget unzip zip xz-utils zstd \\\n   \
        \ build-essential bc bison flex \\\n    libelf-dev libssl-dev libarchive-tools\
        \ \\\n    device-tree-compiler lz4 \\\n    llvm-16 clang-16 lld-16 \\\n  \
        \  python3 python-is-python3 \\\n    gcc-aarch64-linux-gnu g++-aarch64-linux-gnu\
        \ \\\n    pahole\nsudo update-alternatives --install /usr/bin/clang   clang\
        \   /usr/bin/clang-16 100\nsudo update-alternatives --install /usr/bin/ld.lld\
        \  ld.lld  /usr/bin/lld-16   100"
    - name: Download kernel source (A06 • 5.15.151)
      run: 'set -eux

        wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"

        mkdir kernel-5.15

        tar -xf kernel.tar -C kernel-5.15 --strip-components=1'
    - name: Clone AnyKernel3 & SUSFS
      run: 'set -eux

        git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3

        git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git
        susfs'
    - name: Apply KernelSU-Next
      run: 'set -eux

        cd kernel-5.15

        curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh"
        | bash -s -- -s next'
    - name: Apply SUSFS patches
      run: 'set -eux

        cd kernel-5.15

        patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch
        || true

        cp -r ../susfs/kernel_patches/fs/* fs/ || true

        cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true'
    - name: Fix Kconfig unicode/whitespace
      run: 'set -eux

        cd kernel-5.15

        find drivers -name "Kconfig*" -type f -print0 | xargs -0 sed -i "s/’/''/g;
        s/‘/''/g"

        find drivers -name "Kconfig*" -type f -print0 | xargs -0 perl -i -pe ''s/\x{00A0}/
        /g; s/\x{FEFF}//g; s/\r$//''

        sed -i ''s/^[[:space:]]*#/#/'' drivers/power/supply/Kconfig || true'
    - name: Select defconfig + Fetch ABI + Build
      shell: bash
      run: "set -euo pipefail\ncd kernel-5.15\nif [ -f arch/arm64/configs/a06x_defconfig\
        \ ]; then\n  DEFCONFIG=a06x_defconfig\nelif [ -f arch/arm64/configs/a06_defconfig\
        \ ]; then\n  DEFCONFIG=a06_defconfig\nelse\n  echo \"⚠️  Không tìm thấy defconfig,\
        \ fallback sang gki_defconfig\"\n  DEFCONFIG=gki_defconfig\nfi\necho \"✅ DEFCONFIG=$DEFCONFIG\"\
        \ncd ..\ngit clone --depth=1 https://android.googlesource.com/kernel/common\
        \ -b android13-5.15 gki-common\ncd kernel-5.15\nABI_FILE=\"\"\nif ls ../gki-common/android/\
        \ | grep -q \"abi_gki_aarch64_mtk\"; then\n  ABI_FILE=$(ls ../gki-common/android/\
        \ | grep \"abi_gki_aarch64_mtk\" | head -n1)\nelif ls ../gki-common/android/\
        \ | grep -q \"abi_gki_aarch64_generic\"; then\n  ABI_FILE=$(ls ../gki-common/android/\
        \ | grep \"abi_gki_aarch64_generic\" | head -n1)\nfi\nif [ -n \"${ABI_FILE:-}\"\
        \ ]; then\n  cp \"../gki-common/android/$ABI_FILE\" abi_symbollist.raw\nelse\n\
        \  echo \"⚠️  Không tìm thấy ABI, tạo file rỗng\"\n  : > abi_symbollist.raw\n\
        fi\nmkdir -p abi out out/abi out/android/abi out/obj/KERNEL_OBJ/kernel-5.15\n\
        cp abi_symbollist.raw abi/abi_symbollist.raw\ncp abi_symbollist.raw out/abi/abi_symbollist.raw\n\
        cp abi_symbollist.raw out/android/abi/abi_symbollist.raw\ncp abi_symbollist.raw\
        \ out/obj/KERNEL_OBJ/kernel-5.15/abi_symbollist.raw\ncp abi_symbollist.raw\
        \ abi_symbollist.raw\ncp abi_symbollist.raw ../kernel-5.15/abi_symbollist.raw\n\
        chmod +x -R ./scripts || true\nmake O=out ARCH=arm64 \"$DEFCONFIG\"\nmake\
        \ O=out ARCH=arm64 olddefconfig\n./scripts/config --file out/.config -e KSU\
        \ -e KSU_SUSFS || true\n./scripts/config --file out/.config -d KSU_KPROBES_HOOK\
        \ || true\nmake O=out ARCH=arm64 olddefconfig\ngrep \"CONFIG_KSU\" out/.config\
        \ || true\ngrep \"CONFIG_SUSFS\" out/.config || true\n( make -j$(nproc --all)\
        \ O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld Image\
        \ Image.gz Image.gz-dtb dtbs modules 2>&1 | tee build.log ); test ${PIPESTATUS[0]}\
        \ -eq 0\nls -la out/arch/arm64/boot || true"
    - name: Pack AnyKernel3
      run: "set -eux\nOUTDIR=kernel-5.15/out/arch/arm64/boot\nls -la \"$OUTDIR\" ||\
        \ true\n\nIMG=\"\"\nif [ -f \"$OUTDIR/Image.gz-dtb\" ]; then\n  IMG=\"$OUTDIR/Image.gz-dtb\"\
        \nelif [ -f \"$OUTDIR/Image.gz\" ]; then\n  IMG=\"$OUTDIR/Image.gz\"\nelif\
        \ [ -f \"$OUTDIR/Image\" ]; then\n  IMG=\"$OUTDIR/Image\"\nfi\n\nif [ -z \"\
        $IMG\" ]; then\n  echo \"❌ Build xong nhưng không tìm thấy kernel Image!\"\
        \n  exit 1\nfi\n\ncp \"$IMG\" AnyKernel3/\n(cd $OUTDIR && cp -r dtb* ../../../../AnyKernel3/\
        \ || true)\n(cd $OUTDIR && cp -r dtbo* ../../../../AnyKernel3/ || true)\n\n\
        cd AnyKernel3\nzip -r ../Kernel-A06-5.15.151-KSU-Next-SUSFS.zip ./*"
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Outputs-A06-5.15.151
        path: 'kernel-5.15/build.log

          kernel-5.15/out/.config

          kernel-5.15/out/arch/arm64/boot/*

          Kernel-A06-5.15.151-KSU-Next-SUSFS.zip'
