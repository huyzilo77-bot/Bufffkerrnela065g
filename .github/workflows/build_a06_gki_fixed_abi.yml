name: Build Samsung A06x Kernel (5.15.151 • KSU-Next + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Free up disk space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          remove-large-packages: true
          remove-swapfile: true
          verbose: true

      - name: Install toolchain & deps
        run: |
          set -eux
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y \
            git curl wget unzip zip xz-utils zstd \
            build-essential bc bison flex \
            libelf-dev libssl-dev libarchive-tools \
            device-tree-compiler lz4 \
            llvm-16 clang-16 lld-16 \
            python3 python-is-python3 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi g++-arm-linux-gnueabi \
            pahole
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-16 100

      - name: Download kernel source
        run: |
          set -eux
          wget -O kernel.tar "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/kernel-5.15.tar"
          mkdir kernel-5.15
          tar -xf kernel.tar -C kernel-5.15 --strip-components=1

      - name: Clone AnyKernel3 & SUSFS
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s -- -s next

      - name: Apply SUSFS patches
        run: |
          cd kernel-5.15
          patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Fix Kconfig unicode/whitespace
        run: |
          cd kernel-5.15
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 sed -i "s/’/'/g; s/‘/'/g"
          find drivers -name "Kconfig*" -type f -print0 | xargs -0 perl -i -pe 's/\x{00A0}/ /g; s/\x{FEFF}//g; s/\r$//'
          sed -i 's/^[[:space:]]*#/#/' drivers/power/supply/Kconfig || true

      - name: Build kernel (Samsung GKI style)
        run: |
          set -eux
          cd kernel-5.15

          # generate build.config
          python scripts/gen_build_config.py \
            --kernel-defconfig a06x_00_defconfig \
            --kernel-defconfig-overlays "entry_level.config" \
            -m user \
            -o ../out/target/product/a06x/obj/KERNEL_OBJ/build.config

          export ARCH=arm64
          export PLATFORM_VERSION=13
          export CROSS_COMPILE="aarch64-linux-gnu-"
          export CROSS_COMPILE_COMPAT="arm-linux-gnueabi-"
          export OUT_DIR="../out/target/product/a06x/obj/KERNEL_OBJ"
          export DIST_DIR="../out/target/product/a06x/obj/KERNEL_OBJ"
          export BUILD_CONFIG="../out/target/product/a06x/obj/KERNEL_OBJ/build.config"

          # clone kernel/build if missing
          cd ..
          if [ ! -d kernel/build ]; then
            git clone https://android.googlesource.com/kernel/build kernel/build
          fi

          # build with Google's build.sh
          cd kernel
          ./build/build.sh 2>&1 | tee ../kernel-5.15/build.log

          ls -la ../out/target/product/a06x/obj/KERNEL_OBJ/dist || true

      - name: Pack AnyKernel3
        run: |
          set -eux
          DIST=out/target/product/a06x/obj/KERNEL_OBJ/dist
          IMG=""

          if [ -f "$DIST/Image.gz-dtb" ]; then
            IMG="$DIST/Image.gz-dtb"
          elif [ -f "$DIST/Image.gz" ]; then
            IMG="$DIST/Image.gz"
          elif [ -f "$DIST/Image" ]; then
            IMG="$DIST/Image"
          fi

          if [ -z "$IMG" ]; then
            echo "❌ Không tìm thấy kernel Image!"
            exit 1
          fi

          cp "$IMG" AnyKernel3/
          (cd $DIST && cp -r dtb* ../../../../../../AnyKernel3/ || true)
          (cd $DIST && cp -r dtbo* ../../../../../../AnyKernel3/ || true)

          cd AnyKernel3
          zip -r ../Kernel-A06-5.15.151-KSU-Next-SUSFS.zip ./*

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs-A06
          path: |
            kernel-5.15/build.log
            out/target/product/a06x/obj/KERNEL_OBJ/dist/*
            Kernel-A06-5.15.151-KSU-Next-SUSFS.zip
