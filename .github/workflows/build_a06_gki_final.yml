name: Build Samsung A06 5G Kernel 5.15 (KSU + SUSFS Final)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Free up disk space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          remove-large-packages: true
          remove-swapfile: true
          verbose: true

      - name: Install deps & toolchains
        run: |
          set -eux
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y \
            git curl wget unzip zip xz-utils zstd \
            build-essential bc bison flex \
            libelf-dev libssl-dev libarchive-tools \
            device-tree-compiler lz4 cpio rsync \
            llvm-16 clang-16 lld-16 \
            python3 python-is-python3 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi g++-arm-linux-gnueabi \
            pahole
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-16 100

      - name: Download Kernel Source (Samsung A06 Release)
        run: |
          wget -O source.zip "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/A066B-5G.zip"
          unzip -q source.zip
          SRC_DIR=$(find . -maxdepth 1 -type d -name "SM-A066B_*" | head -n 1)
          mv "$SRC_DIR" kernel-5.15
          chmod +x -R kernel-5.15

      - name: Clone AnyKernel3 & SUSFS
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
          git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

      - name: Apply KernelSU-Next
        run: |
          cd kernel-5.15
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" \
            | bash -s -- -s next

      - name: Apply SUSFS patches
        run: |
          cd kernel-5.15
          patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
          cp -r ../susfs/kernel_patches/fs/* fs/ || true
          cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

      - name: Select defconfig & set ABI
        run: |
          set -eux
          cd kernel-5.15

          if [ -f arch/arm64/configs/a06x_00_defconfig ]; then
            DEFCONFIG=a06x_00_defconfig
          elif [ -f arch/arm64/configs/a06x_defconfig ]; then
            DEFCONFIG=a06x_defconfig
          else
            DEFCONFIG=gki_defconfig
          fi
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

          # Copy ABI symbollist
          if [ -f ../abi_gki_aarch64 ]; then
            cp ../abi_gki_aarch64 abi_symbollist.raw
            mkdir -p out/obj/KERNEL_OBJ
            cp ../abi_gki_aarch64 out/obj/KERNEL_OBJ/abi_symbollist.raw
          else
            echo "" > abi_symbollist.raw
          fi

      - name: Build Kernel (Samsung build.sh)
        run: |
          set -eux
          cd kernel-5.15
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          export CC=clang
          export LD=ld.lld
          export OUT_DIR=out
          export DIST_DIR=dist
          mkdir -p $OUT_DIR $DIST_DIR

          echo "Using DEFCONFIG=$DEFCONFIG"

          if [ -f build.sh ]; then
            BUILD_CONFIG=arch/arm64/configs/$DEFCONFIG \
            ./build.sh -j$(nproc --all) 2>&1 | tee ../build.log
          elif [ -f build/build.sh ]; then
            BUILD_CONFIG=arch/arm64/configs/$DEFCONFIG \
            ./build/build.sh -j$(nproc --all) 2>&1 | tee ../build.log
          else
            echo "❌ build.sh not found"
            exit 1
          fi

      - name: Detect KBUILD_IMAGE
        run: |
          cd kernel-5.15
          KBUILD_IMAGE=$(grep -m1 "^KBUILD_IMAGE" Makefile | awk '{print $3}')
          echo "KBUILD_IMAGE=$KBUILD_IMAGE" >> $GITHUB_ENV
          echo "✅ Kernel output: $KBUILD_IMAGE"

      - name: Pack AnyKernel3 zip
        run: |
          set -eux
          DIST=kernel-5.15/dist
          IMG="$DIST/${KBUILD_IMAGE}"

          if [ ! -f "$IMG" ]; then
            echo "❌ Kernel image $IMG not found"
            ls -la $DIST || true
            exit 1
          fi

          echo "✅ Found kernel image: $IMG"
          cp "$IMG" AnyKernel3/zImage
          (cd $DIST && cp -r dtb* ../../AnyKernel3/ || true)
          (cd $DIST && cp -r dtbo* ../../AnyKernel3/ || true)

          cd AnyKernel3
          zip -r ../Kernel-A06-5.15.151-KSU-SUSFS.zip ./*

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs-A06
          path: |
            kernel-5.15/build.log
            kernel-5.15/out/.config
            kernel-5.15/dist/*
            Kernel-A06-5.15.151-KSU-SUSFS.zip