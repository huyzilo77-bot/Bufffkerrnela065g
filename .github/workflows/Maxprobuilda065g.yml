name: Build Samsung A06 GKI Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: üì• Checkout source
        uses: actions/checkout@v4

      - name: üßπ Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: üì¶ Install deps & toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget curl unzip bc build-essential ccache \
            flex bison libssl-dev libncurses5-dev python3

      - name: ‚ö° Setup ccache
        run: |
          export USE_CCACHE=1
          ccache -M 10G
          ccache -z

      - name: üì¶ Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: üì• Download Samsung A06 Kernel Source
        run: |
          mkdir -p kernel-src
          cd kernel-src
          wget -q https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/A066B-5G.zip -O kernel.zip
          unzip -q kernel.zip
          tar -xvf Kernel.tar.gz
          ls -la

      - name: üå± Detect Kernel Dir
        run: |
          cd kernel-src
          if [ -d "kernel-5.15" ]; then
            echo "KERNEL_DIR=kernel-5.15" >> $GITHUB_ENV
          elif [ -d "kernel" ]; then
            echo "KERNEL_DIR=kernel" >> $GITHUB_ENV
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c kernel!"
            exit 1
          fi

      - name: üå± Clone KernelSU-Next & SUSFS
        run: |
          git clone --depth=1 https://github.com/KernelSU-Next/KernelSU-Next.git KernelSU-Next
          git clone --depth=1 https://github.com/sidex15/susfs4ksu-module.git susfs

      - name: üå± Apply KernelSU
        run: |
          cd kernel-src/$KERNEL_DIR
          bash ../../KernelSU-Next/kernel/setup.sh || true

      - name: üå± Apply SUSFS
        run: |
          cd kernel-src/$KERNEL_DIR
          patch -p1 < ../../susfs/susfs.patch || true

      - name: üõ†Ô∏è Select defconfig & generate build.config
        run: |
          cd kernel-src/$KERNEL_DIR
          make ARCH=arm64 a06x_defconfig
          python3 scripts/gen_build_config.py \
            --project a06x \
            --kernel-defconfig a06x_defconfig \
            -o out/build.config

      - name: ‚ö° Force enable KernelSU & SUSFS configs
        run: |
          cd kernel-src/$KERNEL_DIR
          if ! grep -q "CONFIG_KSU=y" .config; then
            echo 'CONFIG_KSU=y' >> .config
          fi
          if ! grep -q "CONFIG_SUSFS=y" .config; then
            echo 'CONFIG_SUSFS=y' >> .config
          fi
          make olddefconfig
          grep -E "CONFIG_KSU|CONFIG_SUSFS" .config || true

      - name: Fake prebuilts NDK
        run: |
          mkdir -p prebuilts/ndk
          echo "fake ndk ok"

      - name: üõ†Ô∏è Build Kernel (Auto Detect)
        run: |
          cd kernel-src/$KERNEL_DIR
          set -o pipefail
          if [ -f "build.sh" ]; then
            echo "üîß Ph√°t hi·ªán build.sh ‚Üí ch·∫°y build.sh"
            bash build.sh 2>&1 | tee build.log
          elif [ -f "build_kernel.sh" ]; then
            echo "üîß Ph√°t hi·ªán build_kernel.sh ‚Üí ch·∫°y build_kernel.sh"
            bash build_kernel.sh 2>&1 | tee build.log
          else
            echo "‚ö° Kh√¥ng c√≥ build.sh ‚Üí fallback sang build GKI chu·∫©n"
            export ARCH=arm64
            export SUBARCH=arm64
            export CROSS_COMPILE=aarch64-linux-gnu-
            export CC=clang
            make a06x_defconfig
            make -j$(nproc) 2>&1 | tee build.log
          fi

      - name: üîç Debug build tree
        run: |
          echo "üìÇ Ki·ªÉm tra dist/"
          ls -R kernel-src/$KERNEL_DIR/out/target/product/a06x/obj/KERNEL_OBJ/arch/arm64/boot || true
          ls -R kernel-src/$KERNEL_DIR/out/target/product/a06x/obj/KERNEL_OBJ/dist || true

      - name: ‚úÖ Verify KernelSU & SUSFS in config
        run: |
          cd kernel-src/$KERNEL_DIR/out
          grep -q "CONFIG_KSU=y" .config && echo "‚úÖ CONFIG_KSU ƒë√£ b·∫≠t" || (echo "‚ùå Ch∆∞a b·∫≠t KSU"; exit 1)
          grep -q "CONFIG_SUSFS=y" .config && echo "‚úÖ CONFIG_SUSFS ƒë√£ b·∫≠t" || (echo "‚ùå Ch∆∞a b·∫≠t SUSFS"; exit 1)

      - name: üì¶ Save Original Kernel Tree
        run: |
          zip -r ../Kernel-A06-Original.zip kernel-src/$KERNEL_DIR

      - name: üì¶ Generate Patch & Collect Rejects
        run: |
          cd kernel-src/$KERNEL_DIR
          git init
          git add .
          git commit -m "Original kernel source"
          git apply --reject ../../susfs/*.patch || true
          cd ../..
          git -C kernel-src/$KERNEL_DIR diff > Kernel-A06-KSU-SUSFS.patch
          zip -r Kernel-A06-Rejects.zip kernel-src/$KERNEL_DIR/*.rej || true

      - name: üì§ Upload Kernel Build Outputs
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Outputs
          path: |
            Kernel-A06-Original.zip
            Kernel-A06-KSU-SUSFS.patch
            Kernel-A06-Rejects.zip
            kernel-src/$KERNEL_DIR/out/.config
            kernel-src/$KERNEL_DIR/out/build.log
            kernel-src/$KERNEL_DIR/out/abi_symbollist
            kernel-src/$KERNEL_DIR/out/target/product/a06x/obj/KERNEL_OBJ/arch/arm64/boot/*
            kernel-src/$KERNEL_DIR/out/target/product/a06x/obj/KERNEL_OBJ/dist/*

      - name: üìä Post Cache ccache
        run: |
          ccache -s
