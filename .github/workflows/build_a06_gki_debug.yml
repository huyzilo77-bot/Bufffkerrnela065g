name: Build Samsung A06 5G Kernel 5.15 (KSU + SUSFS) [DEBUG]

on: workflow_dispatch:

jobs: build: runs-on: ubuntu-latest timeout-minutes: 150

steps:
  - name: Checkout source
    uses: actions/checkout@v4

  - name: Free up disk space
    uses: AdityaGarg8/remove-unwanted-software@v5
    with:
      remove-android: true
      remove-dotnet: true
      remove-haskell: true
      remove-codeql: true
      remove-docker-images: true
      remove-large-packages: true
      remove-swapfile: true
      verbose: true

  - name: Install deps & toolchains
    run: |
      set -eux
      sudo apt update
      sudo apt install -y software-properties-common
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
      sudo apt update
      sudo apt install -y \
        git curl wget unzip zip xz-utils zstd \
        build-essential bc bison flex \
        libelf-dev libssl-dev libarchive-tools \
        device-tree-compiler lz4 cpio rsync \
        llvm-16 clang-16 lld-16 \
        python3 python-is-python3 \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
        gcc-arm-linux-gnueabi g++-arm-linux-gnueabi \
        pahole
      sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
      sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-16 100

  - name: Download Kernel Source (Samsung A06 Release - Debug)
    run: |
      set -euxo pipefail
      wget -O source.zip "https://github.com/huyzilo77-bot/Bufffkerrnela065g/releases/download/V1/A066B-5G.zip"
      unzip -q source.zip -d extracted
      ls -la extracted || true
      find extracted -type f -maxdepth 2 -ls || true

      KERNEL_TGZ=$(find extracted -type f -name "Kernel.tar.gz" | head -n1 || true)
      if [ -z "$KERNEL_TGZ" ]; then
        echo "‚ùå Kh√¥ng t√¨m th·∫•y Kernel.tar.gz"
        exit 1
      fi
      tar -xzf "$KERNEL_TGZ" -C .

      echo "üìÇ Sau khi gi·∫£i n√©n Kernel.tar.gz:"
      ls -la . || true

      mv Kernel* kernel-5.15 || true
      chmod -R u+rwX,go+rX kernel-5.15 kernel || true

  - name: Clone AnyKernel3 & SUSFS
    run: |
      git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3
      git clone -b gki-android13-5.15 https://gitlab.com/simonpunk/susfs4ksu.git susfs

  - name: Apply KernelSU-Next
    run: |
      cd kernel-5.15
      curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s -- -s next

  - name: Apply SUSFS patches
    run: |
      cd kernel-5.15
      patch -p1 --forward < ../susfs/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch || true
      cp -r ../susfs/kernel_patches/fs/* fs/ || true
      cp -r ../susfs/kernel_patches/include/linux/* include/linux/ || true

  - name: Select defconfig & build
    run: |
      set -eux
      cd kernel-5.15
      DEFCONFIG="gki_defconfig"
      if [ -f arch/arm64/configs/a06x_00_defconfig ]; then DEFCONFIG=a06x_00_defconfig; fi
      if [ -f arch/arm64/configs/a06x_defconfig ]; then DEFCONFIG=a06x_defconfig; fi
      echo "Using DEFCONFIG=$DEFCONFIG"

      make O=out ARCH=arm64 $DEFCONFIG
      make O=out ARCH=arm64 olddefconfig
      ./scripts/config --file out/.config -e KSU -e KSU_SUSFS || true
      ./scripts/config --file out/.config -d KSU_KPROBES_HOOK || true
      make O=out ARCH=arm64 olddefconfig

  - name: Build Kernel (Debug)
    run: |
      set -eux
      cd kernel-5.15
      make -j$(nproc) O=out ARCH=arm64 \
        CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
        LD=ld.lld \
        Image.gz-dtb modules 2>&1 | tee build.log

  - name: Pack AnyKernel3 zip
    run: |
      set -eux
      OUTDIR=kernel-5.15/out/arch/arm64/boot
      IMG=$(ls $OUTDIR/Image* | head -n1 || true)
      if [ -z "$IMG" ]; then echo "‚ùå Kh√¥ng t√¨m th·∫•y Image"; exit 1; fi
      cp "$IMG" AnyKernel3/zImage
      (cd $OUTDIR && cp -r dtb* ../../../../AnyKernel3/ || true)
      (cd $OUTDIR && cp -r dtbo* ../../../../AnyKernel3/ || true)
      cd AnyKernel3
      zip -r ../Kernel-A06-Debug.zip ./*

  - name: Upload artifacts
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: Kernel-Outputs-A06-Debug
      path: |
        kernel-5.15/build.log
        kernel-5.15/out/.config
        kernel-5.15/out/arch/arm64/boot/*
        Kernel-A06-Debug.zip

